/*
 * $Id$
 *
 * Copyright 2009 Sun Microsystems, Inc., 4150 Network Circle,
 * Santa Clara, California 95054, U.S.A. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 */
package swingx.fontbased;

import java.awt.Font;
import java.awt.Insets;
import java.util.logging.Logger;

import javax.swing.LookAndFeel;
import javax.swing.UIManager;
import javax.swing.border.Border;

import org.jdesktop.swingx.InteractiveTestCase;
import org.jdesktop.swingx.renderer.ListCellContext;
import org.jdesktop.swingx.renderer.TableCellContext;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

/**
 * CellContext related tests.<p>
 * 
 * PENDING JW: should move all bare context related tests here - currently they are spread
 * across the rendererxxtests, hard to find.
 * 
 * @author Jeanette Winzenburg
 */
@RunWith(JUnit4.class)
public class CellContextTest extends InteractiveTestCase {

    @SuppressWarnings("unused")
    private static final Logger LOG = Logger.getLogger(CellContextTest.class
            .getName());
    
    /**
     * Issue #1235-swingx: enhance padding.
     * 
     * Test unfocused cell border in case that
     *   ui doesn't provide a border for unfocused list cell.
     * 
     * 
     * @throws Exception
     * 
     */
    @Test
    public void testFontBasedNoFocusBorder() throws Exception  {
        CellContext context = new ListCellContext();
        LookAndFeel lf = UIManager.getLookAndFeel();
        try {
            setLookAndFeel("Metal");
            assertNull(context.getUINoFocusBorder());
            Border focusBorder = context.getUIFocusBorder();
            assertNotNull(focusBorder);
            Insets insets = focusBorder.getBorderInsets(null);
            LOG.info("insets focusBorder" + insets);
            Font font = context.getFont();
            assertNotNull(font);
            // calculate insets based on font
            Insets fontInsets = SizeUtils.getListCellRendererInsets(font.getSize());
            LOG.info("insets font" + fontInsets);
            // context should sum up the insets
            Insets expected = SizeUtils.addInsets(insets, fontInsets);
            
            assertEquals("context should take into account the focus border insets", 
                    expected, context.getBorder().getBorderInsets(null));
        } finally {
            UIManager.setLookAndFeel(lf);
        }
        
    }

    /**
     * Issue #1235-swingx: enhance padding.
     * 
     * Test unfocused cell border in case that
     *   ui doesn't provide a border for unfocused list cell.
     * 
     * 
     * @throws Exception
     * 
     */
    @Test
    public void testFontBasedFocusBorder() throws Exception  {
        ListCellContext context = new ListCellContext();
        context.installContext(null, null, -1, -1, true, true, false, true);
        LookAndFeel lf = UIManager.getLookAndFeel();
        try {
            setLookAndFeel("Metal");
            assertNull(context.getUINoFocusBorder());
            Border focusBorder = context.getUIFocusBorder();
            assertNotNull(focusBorder);
            Insets insets = focusBorder.getBorderInsets(null);
            LOG.info("insets focusBorder" + insets);
            Font font = context.getFont();
            assertNotNull(font);
            // calculate insets based on font
            Insets fontInsets = SizeUtils.getListCellRendererInsets(font.getSize());
            LOG.info("insets font" + fontInsets);
            // context should sum up the insets
            Insets expected = SizeUtils.addInsets(insets, fontInsets);
            assertEquals("context should take into account the focus border insets", 
                    expected, context.getBorder().getBorderInsets(null));
        } finally {
            UIManager.setLookAndFeel(lf);
        }
        
    }

    /**
     * Issue #1151-swingx: Nimbus border not used in renderer. 
     * @throws Exception 
     */
    @Test
    public void testListContextFocusBorder() throws Exception {
        assertNimbusNoFocusBorder(new ListCellContext(), true);
    }
    /**
     * Issue #1151-swingx: Nimbus border not used in renderer. 
     * @throws Exception 
     */
    @Test
    public void testTableContextFocusBorder() throws Exception {
        assertNimbusNoFocusBorder(new TableCellContext(), true);
    }
    
    /**
     * Issue #1151-swingx: Nimbus border not used in renderer. 
     * @throws Exception 
     */
    @Test
    public void testListContextNoFocusBorder() throws Exception {
        assertNimbusNoFocusBorder(new ListCellContext(), false);
    }
    /**
     * Issue #1151-swingx: Nimbus border not used in renderer. 
     * @throws Exception 
     */
    @Test
    public void testTableContextNoFocusBorder() throws Exception {
        assertNimbusNoFocusBorder(new TableCellContext(), false);
    }
    
    /**
     * Issue #1151-swingx: Nimbus border not used. 
     * @throws Exception 
     */
     public void assertNimbusNoFocusBorder(CellContext context, boolean focused) throws Exception {
        if (!hasLookAndFeel("Nimbus")) {
            LOG.fine("can't run - no Nimbus");
            return;
        }
        LookAndFeel lf = UIManager.getLookAndFeel();
        try {
            setLookAndFeel("Nimbus");
            context.installState(null, -1, -1, false, focused, false, false);
            assertEquals(focused ? context.getUIFocusBorder() : context.getUINoFocusBorder(), 
                    context.getBorder());
        } finally {
            UIManager.setLookAndFeel(lf);
        }
    }
     
     /**
      * Sanity: quick test SizeUtils addInsets.
      */
     @Test
     public void testSizeUtilsAddInsets() {
         Insets one = new Insets(29, 2, 4, 9);
         Insets two = new Insets(0, 5, 89, 1);
         Insets three = new Insets(2, 4, 1000, 6);
         Insets result = SizeUtils.addInsets(one, two, three);
         assertEquals(one.top+ two.top + three.top, result.top);
         assertEquals(one.left+ two.left + three.left, result.left);
         assertEquals(one.bottom+ two.bottom + three.bottom, result.bottom);
         assertEquals(one.right+ two.right + three.right, result.right);
     }
     
     /**
      * Sanity: contract sizeUils add
      */
     @Test(expected = NullPointerException.class)
     public void testSizeUtilsAddNPE() {
         SizeUtils.addInsets(new Insets[]  {null});
     }
     

}

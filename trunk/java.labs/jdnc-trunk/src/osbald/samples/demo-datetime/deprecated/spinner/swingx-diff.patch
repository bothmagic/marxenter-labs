# This patch file was generated by NetBeans IDE
# Following Index: paths are relative to: D:\Projects\swingx-snapshot\src\java
# This patch can be applied using context Tools: Patch action on respective folder.
# It uses platform neutral UTF-8 encoding and \n newlines.
# Above lines and this line are ignored by the patching process.
Index: org/jdesktop/swingx/calendar/JXMonthView.java
*** D:\Projects\swingx-snapshot\src\java\org\jdesktop\swingx\calendar\JXMonthView.java Base (1.38)
--- D:\Projects\swingx-snapshot\src\java\org\jdesktop\swingx\calendar\JXMonthView.java Locally Modified (Based On 1.38)
***************
*** 345,351 ****
          firePropertyChange(FIRST_DISPLAYED_DATE, oldFirstDisplayedDate, firstDisplayedDate);
          firePropertyChange(FIRST_DISPLAYED_MONTH, oldFirstDisplayedMonth, firstDisplayedMonth);
          firePropertyChange(FIRST_DISPLAYED_YEAR, oldFirstDisplayedYear, firstDisplayedYear);
! 
          calculateLastDisplayedDate();
  
          repaint();
--- 345,351 ----
          firePropertyChange(FIRST_DISPLAYED_DATE, oldFirstDisplayedDate, firstDisplayedDate);
          firePropertyChange(FIRST_DISPLAYED_MONTH, oldFirstDisplayedMonth, firstDisplayedMonth);
          firePropertyChange(FIRST_DISPLAYED_YEAR, oldFirstDisplayedYear, firstDisplayedYear);
!         model.setSelectionInterval(new Date(date),model.getLowerBound());
          calculateLastDisplayedDate();
  
          repaint();
***************
*** 451,457 ****
              modifyedStartDate = startDate;
              modifyedEndDate = endDate;
              if (selectionMode == SelectionMode.WEEK_INTERVAL_SELECTION) {
!                 cleanupWeekSelectionDates(startDate, endDate);
              }
              getSelectionModel().addSelectionInterval(cleanupDate(modifyedStartDate), cleanupDate(modifyedEndDate));
          }
--- 451,457 ----
              modifyedStartDate = startDate;
              modifyedEndDate = endDate;
              if (selectionMode == SelectionMode.WEEK_INTERVAL_SELECTION) {
! //                cleanupWeekSelectionDates(startDate, endDate);
              }
              getSelectionModel().addSelectionInterval(cleanupDate(modifyedStartDate), cleanupDate(modifyedEndDate));
          }
***************
*** 692,701 ****
          cal.setTimeInMillis(date);
          // We only want to compare the day, month and year
          // so reset all other values to 0.
!         cal.set(Calendar.HOUR_OF_DAY, 0);
!         cal.set(Calendar.MINUTE, 0);
!         cal.set(Calendar.SECOND, 0);
!         cal.set(Calendar.MILLISECOND, 0);
          return cal.getTimeInMillis();
      }
  
--- 692,701 ----
          cal.setTimeInMillis(date);
          // We only want to compare the day, month and year
          // so reset all other values to 0.
! //        cal.set(Calendar.HOUR_OF_DAY, 0);
! //        cal.set(Calendar.MINUTE, 0);
! //        cal.set(Calendar.SECOND, 0);
! //        cal.set(Calendar.MILLISECOND, 0);
          return cal.getTimeInMillis();
      }
  
Index: org/jdesktop/swingx/plaf/basic/BasicMonthViewUI.java
*** D:\Projects\swingx-snapshot\src\java\org\jdesktop\swingx\plaf\basic\BasicMonthViewUI.java Base (1.32)
--- D:\Projects\swingx-snapshot\src\java\org\jdesktop\swingx\plaf\basic\BasicMonthViewUI.java Locally Modified (Based On 1.32)
***************
*** 1251,1260 ****
          cal.setTimeInMillis(date);
          // We only want to compare the day, month and year
          // so reset all other values to 0.
!         cal.set(Calendar.HOUR_OF_DAY, 0);
!         cal.set(Calendar.MINUTE, 0);
!         cal.set(Calendar.SECOND, 0);
!         cal.set(Calendar.MILLISECOND, 0);
          return cal.getTimeInMillis();
      }
  
--- 1251,1260 ----
          cal.setTimeInMillis(date);
          // We only want to compare the day, month and year
          // so reset all other values to 0.
! //        cal.set(Calendar.HOUR_OF_DAY, 0);
! //        cal.set(Calendar.MINUTE, 0);
! //        cal.set(Calendar.SECOND, 0);
! //        cal.set(Calendar.MILLISECOND, 0);
          return cal.getTimeInMillis();
      }
  
Index: org/jdesktop/swingx/JXDatePicker.java
*** D:\Projects\swingx-snapshot\src\java\org\jdesktop\swingx\JXDatePicker.java Base (1.37)
--- D:\Projects\swingx-snapshot\src\java\org\jdesktop\swingx\JXDatePicker.java Locally Modified (Based On 1.37)
***************
*** 38,52 ****
  import java.util.TimeZone;
  import javax.swing.AbstractAction;
  import javax.swing.JComponent;
- import javax.swing.JFormattedTextField;
- import javax.swing.JFormattedTextField.AbstractFormatter;
- import javax.swing.JFormattedTextField.AbstractFormatterFactory;
  import javax.swing.JFrame;
  import javax.swing.JPanel;
  import javax.swing.JPopupMenu;
  import javax.swing.SwingUtilities;
  import javax.swing.UIManager;
! import javax.swing.text.DefaultFormatterFactory;
  import org.jdesktop.swingx.calendar.DateSpan;
  import org.jdesktop.swingx.calendar.JXMonthView;
  import org.jdesktop.swingx.event.EventListenerMap;
--- 38,52 ----
  import java.util.TimeZone;
  import javax.swing.AbstractAction;
  import javax.swing.JComponent;
  import javax.swing.JFrame;
  import javax.swing.JPanel;
  import javax.swing.JPopupMenu;
+ import javax.swing.JSpinner;
+ import javax.swing.SpinnerDateModel;
  import javax.swing.SwingUtilities;
  import javax.swing.UIManager;
! import javax.swing.event.ChangeEvent;
! import javax.swing.event.ChangeListener;
  import org.jdesktop.swingx.calendar.DateSpan;
  import org.jdesktop.swingx.calendar.JXMonthView;
  import org.jdesktop.swingx.event.EventListenerMap;
***************
*** 85,91 ****
      /**
       * The editable date field that displays the date
       */
!     private JFormattedTextField _dateField;
  
      /**
       * Popup that displays the month view with controls for
--- 85,91 ----
      /**
       * The editable date field that displays the date
       */
!     private JSpinner _dateField;
  
      /**
       * Popup that displays the month view with controls for
***************
*** 100,105 ****
--- 100,106 ----
      private EventListenerMap listenerMap;
      protected boolean lightWeightPopupEnabled = JPopupMenu.getDefaultLightWeightPopupEnabled();
  
+     private String format = "EEEEE, d MMMMM yyyy HH:mm:ss";
      /**
       * Create a new date picker using the current date as the initial
       * selection and the default abstract formatter
***************
*** 177,182 ****
--- 178,193 ----
          return uiClassID;
      }
  
+     
+     public void setFormat(String format) {
+         this.format = format;
+         _dateField.setEditor(new JSpinner.DateEditor(_dateField,format));
+     }
+     
+     public String getFormat(String format) {
+         return format;
+     }
+     
      /**
       * Replaces the currently installed formatter and factory used by the
       * editor.  These string formats are defined by the
***************
*** 200,207 ****
       * @param formats The date formats to use.
       */
      public void setFormats(DateFormat... formats) {
!         _dateField.setFormatterFactory(new DefaultFormatterFactory(
!                 new JXDatePickerFormatter(formats)));
      }
  
      /**
--- 211,218 ----
       * @param formats The date formats to use.
       */
      public void setFormats(DateFormat... formats) {
! //        _dateField.setFormatterFactory(new DefaultFormatterFactory(
! //                new JXDatePickerFormatter(formats)));
      }
  
      /**
***************
*** 215,227 ****
       */
      public DateFormat[] getFormats() {
          // Dig this out from the factory, if possible, otherwise return null.
!         AbstractFormatterFactory factory = _dateField.getFormatterFactory();
!         if (factory != null) {
!             AbstractFormatter formatter = factory.getFormatter(_dateField);
!             if (formatter instanceof JXDatePickerFormatter) {
!                 return ((JXDatePickerFormatter) formatter).getFormats();
!             }
!         }
          return null;
      }
  
--- 226,238 ----
       */
      public DateFormat[] getFormats() {
          // Dig this out from the factory, if possible, otherwise return null.
! //        AbstractFormatterFactory factory = _dateField.getFormatterFactory();
! //        if (factory != null) {
! //            AbstractFormatter formatter = factory.getFormatter(_dateField);
! //            if (formatter instanceof JXDatePickerFormatter) {
! //                return ((JXDatePickerFormatter) formatter).getFormats();
! //            }
! //        }
          return null;
      }
  
***************
*** 371,382 ****
       *
       * @return the formatted text field
       */
!     public JFormattedTextField getEditor() {
          return _dateField;
      }
  
!     public void setEditor(JFormattedTextField editor) {
!         JFormattedTextField oldEditor = _dateField;
          _dateField = editor;
          firePropertyChange(EDITOR, oldEditor, _dateField);
      }
--- 382,409 ----
       *
       * @return the formatted text field
       */
!     public JSpinner getEditor() {
          return _dateField;
      }
  
!     public void setEditor(JSpinner editor) {
!          editor.setModel(new SpinnerDateModel());
!          editor.setEditor(new JSpinner.DateEditor(editor,format));        
!          editor.addChangeListener(new ChangeListener() {
!              public void stateChanged(ChangeEvent e) {
! 
!                  JSpinner temp = (JSpinner)e.getSource();
!                  SpinnerDateModel temp2 = (SpinnerDateModel)temp.getModel();
! 
!                  Long date = temp2.getDate().getTime();
! 
!                  _monthView.setFirstDisplayedDate(date);
!                  //_monthView.setSelectionInterval(temp2.getDate(),temp2.getDate());
!                  
!                  //_monthView.isSelectedDate()
!              }
!          });
!          JSpinner oldEditor = _dateField;
            _dateField = editor;
            firePropertyChange(EDITOR, oldEditor, _dateField);
      }
***************
*** 393,399 ****
       * @return true if the current value being edited is valid.
       */
      public boolean isEditValid() {
!         return _dateField.isEditValid();
      }
  
      /**
--- 420,426 ----
       * @return true if the current value being edited is valid.
       */
      public boolean isEditValid() {
!         return true;
      }
  
Index: org/jdesktop/swingx/plaf/basic/BasicDatePickerUI.java
*** D:\Projects\swingx-snapshot\src\java\org\jdesktop\swingx\plaf\basic\BasicDatePickerUI.java Base (1.17)
--- D:\Projects\swingx-snapshot\src\java\org\jdesktop\swingx\plaf\basic\BasicDatePickerUI.java Locally Modified (Based On 1.17)
***************
*** 45,58 ****
  import javax.swing.JFormattedTextField;
  import javax.swing.JPanel;
  import javax.swing.JPopupMenu;
  import javax.swing.KeyStroke;
  import javax.swing.SwingUtilities;
  import javax.swing.UIManager;
  import javax.swing.plaf.ComponentUI;
  import javax.swing.plaf.UIResource;
- import javax.swing.text.View;
  import org.jdesktop.swingx.JXDatePicker;
- import org.jdesktop.swingx.JXDatePickerFormatter;
  import org.jdesktop.swingx.calendar.JXMonthView;
  import org.jdesktop.swingx.plaf.DatePickerUI;
  
--- 45,60 ----
  import javax.swing.JFormattedTextField;
  import javax.swing.JPanel;
  import javax.swing.JPopupMenu;
+ import javax.swing.JSpinner;
  import javax.swing.KeyStroke;
  import javax.swing.SwingUtilities;
  import javax.swing.UIManager;
  import javax.swing.plaf.ComponentUI;
  import javax.swing.plaf.UIResource;
  import org.jdesktop.swingx.JXDatePicker;
  import org.jdesktop.swingx.calendar.JXMonthView;
  import org.jdesktop.swingx.plaf.DatePickerUI;
***************
*** 94,100 ****
      }
  
      protected void installComponents() {
!         JFormattedTextField editor = datePicker.getEditor();
          if (editor == null || editor instanceof UIResource) {
              datePicker.setEditor(createEditor());
          }
--- 93,99 ----
      }
  
      protected void installComponents() {
!         JComponent editor = datePicker.getEditor();
          if (editor == null || editor instanceof UIResource) {
              datePicker.setEditor(createEditor());
          }
***************
*** 115,121 ****
      }
  
      protected void uninstallComponents() {
!         JFormattedTextField editor = datePicker.getEditor();
          if (editor != null) {
              editor.removePropertyChangeListener(getHandler());
              datePicker.remove(editor);
--- 114,120 ----
      }
  
      protected void uninstallComponents() {
!         JComponent editor = datePicker.getEditor();
          if (editor != null) {
              editor.removePropertyChangeListener(getHandler());
              datePicker.remove(editor);
***************
*** 209,223 ****
       *
       * @return an instance of a JFormattedTextField
       */
!     protected JFormattedTextField createEditor() {
!         JFormattedTextField f = new DefaultEditor(new JXDatePickerFormatter());
          f.setName("dateField");
-         f.setColumns(UIManager.getInt("JXDatePicker.numColumns"));
-         f.setBorder(UIManager.getBorder("JXDatePicker.border"));
  
          return f;
      }
--- 208,221 ----
       *
       * @return an instance of a JFormattedTextField
       */
!     protected JSpinner createEditor() {
!         JSpinner f = new JSpinner();
          f.setName("dateField");
          
+ //TODO Add support for DefaultEditor(JSpinner) so that numColumns can be used        
+ //        f.setColumns(UIManager.getInt("JXDatePicker.numColumns"));
+ //        f.setBorder(UIManager.getBorder("JXDatePicker.border"));
+ 
          return f;
      }
  
***************
*** 258,283 ****
  
      @Override
      public int getBaseline(int width, int height) {
!         JFormattedTextField editor = datePicker.getEditor();
!         View rootView = editor.getUI().getRootView(editor);
!         if (rootView.getViewCount() > 0) {
              Insets insets = editor.getInsets();
              Insets insetsOut = datePicker.getInsets();
              int nh = height - insets.top - insets.bottom
                      - insetsOut.top - insetsOut.bottom;
              int y = insets.top + insetsOut.top;
!             View fieldView = rootView.getView(0);
!             int vspan = (int) fieldView.getPreferredSpan(View.Y_AXIS);
!             if (nh != vspan) {
!                 int slop = nh - vspan;
!                 y += slop / 2;
!             }
              FontMetrics fm = editor.getFontMetrics(editor.getFont());
              y += fm.getAscent();
              return y;
          }
-         return -1;
-     }
  
      /**
       * Action used to commit the current value in the JFormattedTextField.
--- 259,280 ----
  
      @Override
      public int getBaseline(int width, int height) {
!         JSpinner editor = datePicker.getEditor();
              Insets insets = editor.getInsets();
              Insets insetsOut = datePicker.getInsets();
              int nh = height - insets.top - insets.bottom
                      - insetsOut.top - insetsOut.bottom;
              int y = insets.top + insetsOut.top;
! 
! 
              FontMetrics fm = editor.getFontMetrics(editor.getFont());
              y += fm.getAscent();
              return y;
+ 
      }
  
      /**
***************
*** 295,301 ****
  
      private class DefaultEditor extends JFormattedTextField implements UIResource {
          public DefaultEditor(AbstractFormatter formatter) {
!             super(formatter);
          }
      }
  
--- 289,295 ----
  
      private class DefaultEditor extends JFormattedTextField implements UIResource {
          public DefaultEditor(AbstractFormatter formatter) {
!             //super(formatter);
          }
      }
  
***************
*** 350,364 ****
              }
  
              if (!datePicker.isEditable()) {
!                 JFormattedTextField editor = datePicker.getEditor();
!                 if (editor.isEditValid()) {
!                     //noinspection EmptyCatchBlock
!                     try {
!                         editor.commitEdit();
!                     } catch (java.text.ParseException ex) {
                      }
-                 }
-             }
              toggleShowPopup();
          }
  
--- 344,361 ----
              }
  
              if (!datePicker.isEditable()) {
!                 JComponent editor = datePicker.getEditor();
! //                    if (editor.isEditValid()) {
! //                    //noinspection EmptyCatchBlock
! //                    try {
! //                        editor.commitEdit();
! //                    } catch (java.text.ParseException ex) {
! //                    }
! //                    }
              }
              toggleShowPopup();
          }
***************
*** 435,441 ****
              } else if ("editable".equals(property)) {
                  boolean isEditable = datePicker.isEditable();
                  datePicker.getMonthView().setEnabled(isEditable);
!                 datePicker.getEditor().setEditable(isEditable);
              } else if (JComponent.TOOL_TIP_TEXT_KEY.equals(property)) {
                  String tip = datePicker.getToolTipText();
                  datePicker.getEditor().setToolTipText(tip);
--- 429,435 ----
              } else if ("editable".equals(property)) {
                  boolean isEditable = datePicker.isEditable();
                  datePicker.getMonthView().setEnabled(isEditable);
!                 datePicker.getEditor().setEnabled(isEditable);
              } else if (JComponent.TOOL_TIP_TEXT_KEY.equals(property)) {
                  String tip = datePicker.getToolTipText();
                  datePicker.getEditor().setToolTipText(tip);
***************
*** 450,462 ****
                      popup.add(linkPanel, BorderLayout.SOUTH);
                  }
              } else if (JXDatePicker.EDITOR.equals(property)) {
!                 JFormattedTextField oldEditor = (JFormattedTextField)e.getOldValue();
                  if (oldEditor != null) {
                      oldEditor.removePropertyChangeListener(this);
                      datePicker.remove(oldEditor);
                  }
  
!                 JFormattedTextField editor = (JFormattedTextField)e.getNewValue();
                  datePicker.add(editor);
                  editor.addPropertyChangeListener(this);
                  datePicker.revalidate();
--- 444,456 ----
                      popup.add(linkPanel, BorderLayout.SOUTH);
                  }
              } else if (JXDatePicker.EDITOR.equals(property)) {
!                 JComponent oldEditor = (JComponent)e.getOldValue();
                  if (oldEditor != null) {
                      oldEditor.removePropertyChangeListener(this);
                      datePicker.remove(oldEditor);
                  }
  
!                 JComponent editor = (JComponent)e.getNewValue();
                  datePicker.add(editor);
                  editor.addPropertyChangeListener(this);
                  datePicker.revalidate();

// ============================================================================
// $Id: SwingEL.jj 620 2005-08-19 22:38:33Z david_hall $
// Copyright (c) 2005  David A. Hall
// ============================================================================
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
// ============================================================================

options {
  ERROR_REPORTING = false;
  STATIC = false;
  JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(SwingEL)

package org.jdesktop.jdnc.swingel;

import java.io.InputStreamReader;
import java.io.StringBufferInputStream;
import java.util.ArrayList;
import java.util.List;
import net.sf.jga.fn.BinaryFunctor;
import net.sf.jga.fn.UnaryFunctor;
import net.sf.jga.fn.adaptor.ConstantBinary;
import net.sf.jga.fn.property.ArrayUnary;
import net.sf.jga.fn.property.ConstructUnary;
import net.sf.jga.fn.property.InvokeMethod;
import net.sf.jga.fn.string.DefaultFormat;
import net.sf.jga.parser.BinaryFunctorRef;
import net.sf.jga.parser.GenericParser;
import net.sf.jga.parser.IParser;

/**
 */
public class SwingEL {
    // Constructors that JavaCC doesn't create with the current options
    public SwingEL() { this(getDefaultParser()); }

    public SwingEL(IParser parser) {
        this(new InputStreamReader(System.in));
        expParser = (parser == null) ? getDefaultParser() : parser;
    }

    static private IParser getDefaultParser() {
        return GenericParser.getInstance();
    }
                            
    // global instance
    static private SwingEL _instance;

    /**
     * Returns a globally accessible default instance of a SwingEL.  Do not
     * configure this instance as any changes made will affect all code that accesses
     * this class through a given classloader.
     */
    static public synchronized SwingEL getInstance() {
        if (_instance == null) {
            _instance = new SwingEL();
        }

        return _instance;
    }

    
    // the parser used to parse expressions
    private IParser expParser;

    synchronized private IParser getExpressionParser() {
        if (expParser == null) {
            expParser = getDefaultParser();
        }

        return expParser;
    }
    
    /**
     * Parses the string 
     */
    static public FunctorValueExpression parse(String str) throws UncheckedParseException {
        try {
            return getInstance().parseExpression(str);
        }
        catch(ParseException x) {
            throw new UncheckedParseException(x);
        }
    }

    
//     // Private functor wrapping up the StringBuffer.append(String) method
//     private InvokeMethod invokeAppendString =
//         new InvokeMethod(StringBuffer.class, "append", String.class);

    // Private functor wrapping up the StringBuffer.append(String) method
    private InvokeMethod invokeAppend =
        new InvokeMethod(StringBuffer.class, "append", Object.class);

    // Private functor that wraps its argument in a 1-element array
    private ArrayUnary toArray = new ArrayUnary();

    // Private functor that calls the toString method of its argument
    private DefaultFormat defaultFormat = new DefaultFormat();
    
    // Sentinal functor -- known starting value that simplifies handling
    // of the various potentially empty occurrences
    BinaryFunctorRef sentinal =
        new BinaryFunctorRef(new ConstantBinary(""), ELContext.class, Object.class, String.class);
    
    /**
     * Parses the string 
     */
    public FunctorValueExpression parseExpression(String str) throws ParseException {
        ReInit (new StringBufferInputStream(str));
        return RValue(str);
    }


    private BinaryFunctorRef append(BinaryFunctorRef prefix, BinaryFunctorRef suffix) {
        if (isSentinal(suffix))
            return prefix;
        
        if (isSentinal(prefix))
            return suffix;

        prefix = makeBuffer(prefix);
//         BinaryFunctor bf = prefix.getFunctor();

        // make bf a BinaryFunctor that invokes the append method on the StringBuffer
        // returned by the previous value, passing the result of bfr's functor (the
        // result is still a StringBuffer, so it's safe to do this repeatedly)

        BinaryFunctor bf = invokeAppend.compose(prefix.getFunctor(),
                                                      toArray.compose(suffix.getFunctor()));
                                       
        return new BinaryFunctorRef(bf, prefix.getArgType(0), prefix.getArgType(1),
                                    StringBuffer.class);
    }


    private BinaryFunctorRef append(BinaryFunctorRef prefix, String literal) {
        if (literal == null || literal.equals(""))
            return prefix;
        
        if (isSentinal(prefix))
            return new BinaryFunctorRef(new ConstantBinary(literal),
                                        ELContext.class, Object.class, String.class);

        prefix = makeBuffer(prefix);
        BinaryFunctor bf =
            invokeAppend.generate2nd(toArray.bind(literal)).compose(prefix.getFunctor());
        return new BinaryFunctorRef(bf, prefix.getArgType(0), prefix.getArgType(1),
                                    StringBuffer.class);
    }


    // If the functor already returns a StringBuffer, then simply return it.
    // If the functor returns anything else, then create a functor that returns
    //   a string buffer from the result of the arg functor and return that.
    private BinaryFunctorRef makeBuffer(BinaryFunctorRef bf) {
        if (bf.getReturnType().equals(StringBuffer.class))
            return bf;

        UnaryFunctor ctor = new ConstructUnary(String.class, StringBuffer.class);
        if ( ! (bf.getReturnType().equals(String.class))) 
            ctor = ctor.compose(defaultFormat);

        return new BinaryFunctorRef(ctor.compose(bf.getFunctor()),
                                    bf.getArgType(0), bf.getArgType(1), StringBuffer.class);
    }

    /**
     * Returns true if the functor ref is the sentinal value, or equivalent to the
     * sentinal value
     */
    private boolean isSentinal(BinaryFunctorRef bf) {
        if (bf == sentinal)
            return true;

        BinaryFunctor fn = bf.getFunctor();
        return fn instanceof ConstantBinary && fn.fn(null,null).equals("");
    }
}

PARSER_END(SwingEL)


/* ====================================================

LValue            ::= "${"  LValueInner  "}"
                    | "#{"  LValueInner  "}"
         
LValueInner       ::= Identifier
                    | NonLiteralValuePrefix (ValueSuffix)*

RValue            ::= (RValueComponent1)+
                    | (RValueComponent2)+

RValueComponent1  ::= "${" Expression "}"
                    | LiteralExpression

RValueComponent2  ::= "#{" Expression "}"
                    | LiteralExpression

MethodExpression  ::= LValue

LiteralExpression ::= (LiteralComponent)* ([$#])?
// i.e., a string of any characters that doesn t include ${ or #{ unless escaped by \${ or \#{.

LiteralComponent  ::= ([^$#\])*\([$#])?
                    | ([^$#])*([$#][^{])
                    | ([^$#])*
   
   ==================================================== */

<DEFAULT> TOKEN:
{
  < DOLLAR:            "$" >
| < POUND:             "#" >
| < DOLLAR_EXPRESSION: "${" > : EXPRESSION
// | < POUND_EXPRESSION:  "#{" > : EXPRESSION
| < LITERAL_TEXT:
      ((~["$","#","\\"])* "\\" (["$","#"])?) | ((~["$","#"])* ["$","#"] ~["{"]) | ((~["$","#"])+)
  >
}

<EXPRESSION> TOKEN:
{
  < END_EXPRESSION:    "}" >  : DEFAULT
| < EXPRESSION_STRING: ((~["}"]) | ("\\}"))+ >
}

/**
 **/

FunctorValueExpression RValue (String exp) throws ParseException :
{
    BinaryFunctorRef bf = sentinal;
    String literal;

    if (exp == null || exp.equals(""))
        return new FunctorValueExpression("", new ConstantBinary(""));
}
{
    ( literal = LiteralString()
        { bf = new BinaryFunctorRef(new ConstantBinary(literal),
                                    ELContext.class, Object.class, String.class);
        }
    )
    ( bf = DollarExpressions(bf) /* | PoundExpressions() */ )?
        { if (bf.getReturnType().equals(StringBuffer.class))
              return new FunctorValueExpression(exp, defaultFormat.compose(bf.getFunctor()));
          else
              return new FunctorValueExpression(exp, bf.getFunctor());
        }
}


String LiteralString() :
{
    StringBuffer buf = new StringBuffer();
    String str;
    Token t;
}
{
    ( LOOKAHEAD(1) t = <LITERAL_TEXT> { buf.append(t.image); } )*
    ( (t = <DOLLAR> | t = <POUND> ) { buf.append(t.image); } )?
        { return buf.toString(); }
}


BinaryFunctorRef DollarExpressions(BinaryFunctorRef prefix) throws ParseException :
{
    BinaryFunctorRef bf = null;
}
{
    bf = DollarExpression(prefix)
    ( LOOKAHEAD (<DOLLAR_EXPRESSION>) bf = DollarExpression(bf) )*
        { return bf; }
}


BinaryFunctorRef DollarExpression(BinaryFunctorRef prefix) throws ParseException :
{
    BinaryFunctorRef bf = null;
    String str = null;
}
{
    <DOLLAR_EXPRESSION> bf = ExpressionBody() { bf = append(prefix, bf); }
    <END_EXPRESSION> str = LiteralString()
        { return (str == null) ? bf : append(bf, str); }
}
    

// void PoundExpressions() :
// {
// }
// {
//     ( LOOKAHEAD (<POUND_EXPRESSION>)
//         <POUND_EXPRESSION> ExpressionBody() <END_EXPRESSION>
//     |
//         LiteralString()
//     )+
// }


BinaryFunctorRef ExpressionBody () throws ParseException:
{
    Token t;
}
{
    t = <EXPRESSION_STRING>
        {
            String exp = t.image.trim();
            if (exp.equals(""))
                return sentinal;
            
            try {
                IParser parser = getExpressionParser();
                BinaryFunctor fn = parser.parseBinary(exp, ELContext.class, Object.class);
                return new BinaryFunctorRef(fn,ELContext.class,Object.class,parser.getReturnType());
            }
            catch (net.sf.jga.parser.ParseException x) {
                ParseException px = new ParseException();
                px.initCause(x);
                throw px;
            }
//             return new BinaryFunctorRef(new ConstantBinary(t.image.trim()),
//                                       ELContext.class, Object.class, String.class);
        }
}


/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.netbeans.aishamodule;

import java.io.IOException;
import java.io.Serializable;
import java.util.logging.Logger;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.NotifyDescriptor.Confirmation;
import org.openide.cookies.SaveCookie;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.nodes.Node;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
//import org.openide.util.Utilities;
/**
 * Top component which displays something.
 * 
 */
final class AishaTopComponent extends TopComponent {

    private DummyNode dummyNode;
    private static AishaTopComponent instance;
    /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
    private static final String PREFERRED_ID = "AishaTopComponent";

    private AishaTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(AishaTopComponent.class, "CTL_AishaTopComponent"));
        setToolTipText(NbBundle.getMessage(AishaTopComponent.class, "HINT_AishaTopComponent"));
//        setIcon(Utilities.loadImage(ICON_PATH, true));

        setActivatedNodes(new Node[]{dummyNode = new DummyNode()});
        
        aishaTextField.getDocument().addDocumentListener(new DocumentListener() {

            public void insertUpdate(DocumentEvent arg0) {
                dummyNode.fire(true);
            }

            public void removeUpdate(DocumentEvent arg0) {
                dummyNode.fire(true);
            }

            public void changedUpdate(DocumentEvent arg0) {
                dummyNode.fire(true);
            }
        });

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        aishaTextField = new javax.swing.JTextArea();

        aishaTextField.setColumns(20);
        aishaTextField.setRows(5);
        jScrollPane1.setViewportView(aishaTextField);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea aishaTextField;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link findInstance}.
     */
    public static synchronized AishaTopComponent getDefault() {
        if (instance == null) {
            instance = new AishaTopComponent();
        }
        return instance;
    }

    private class DummyNode extends AbstractNode {

        SaveCookieImpl impl;

        public DummyNode() {
            super(Children.LEAF);
            impl = new SaveCookieImpl();
        }

        public void fire(boolean modified) {
            if (modified) {
                //If the text is modified,
                //we implement SaveCookie,
                //and add the implementation to the cookieset:
                getCookieSet().assign(SaveCookie.class, impl);
            } else {
                //Otherwise, we make no assignment
                //and the SaveCookie is not made available:
                getCookieSet().assign(SaveCookie.class);
            }
        }

        private class SaveCookieImpl implements SaveCookie {

            public void save() throws IOException {

                Confirmation msg = new NotifyDescriptor.Confirmation("Do you want to save \"" +
                        aishaTextField.getText() + "\"?", NotifyDescriptor.OK_CANCEL_OPTION,
                        NotifyDescriptor.QUESTION_MESSAGE);

                Object result = DialogDisplayer.getDefault().notify(msg);

                //When user clicks "Yes", indicating they really want to save,
                //we need to disable the Save button and Save menu item,
                //so that it will only be usable when the next change is made
                //to the text field:
                if (NotifyDescriptor.YES_OPTION.equals(result)) {
                    fire(false);
                //Implement your save functionality here.
                }

            }
        }
    }

    /**
     * Obtain the AishaTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized AishaTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(AishaTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof AishaTopComponent) {
            return (AishaTopComponent) win;
        }
        Logger.getLogger(AishaTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID +
                "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    @Override
    public void componentOpened() {
    // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
    // TODO add custom code on component closing
    }

    /** replaces this in object stream */
    @Override
    public Object writeReplace() {
        return new ResolvableHelper();
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    final static class ResolvableHelper implements Serializable {

        private static final long serialVersionUID = 1L;

        public Object readResolve() {
            return AishaTopComponent.getDefault();
        }
    }
}

package de.mt.jackrabbit.browser.ui;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyVetoException;
import java.io.Serializable;
import javax.jcr.AccessDeniedException;
import javax.jcr.InvalidItemStateException;
import javax.jcr.ItemExistsException;
import javax.jcr.Repository;
import javax.jcr.RepositoryException;
import javax.jcr.Session;
import javax.jcr.lock.LockException;
import javax.jcr.nodetype.ConstraintViolationException;
import javax.jcr.nodetype.NoSuchNodeTypeException;
import javax.jcr.version.VersionException;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;

import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.ContextTreeView;
import org.openide.explorer.view.TreeTableView;
import org.openide.nodes.Node;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.util.NbBundle;
import org.openide.util.lookup.ProxyLookup;
import org.openide.windows.TopComponent;

//import org.openide.util.Utilities;

/**
 * Top component which displays something.
 */
final class ExplorerTopComponent extends TopComponent implements ExplorerManager.Provider  {

  private static ExplorerTopComponent instance;
  
  /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
  private static final String PREFERRED_ID = "ExplorerTopComponent";
  
  /**
   * repository property
   */
  private Repository repository;
  /**
   * session property
   */ 
  private Session session;
  
    
  /**
   * explorermanager of tree view
   */
  private final ExplorerManager explorerManager = new ExplorerManager();

  public ExplorerTopComponent(Repository aRepository, Session aSession) {
    initComponents();
    setName(NbBundle.getMessage(ExplorerTopComponent.class, "CTL_ExplorerTopComponent"));
    setToolTipText(NbBundle.getMessage(ExplorerTopComponent.class, "HINT_ExplorerTopComponent"));
//        setIcon(Utilities.loadImage(ICON_PATH, true));
    //ProxyLookup merge = new ProxyLookup(ExplorerUtils.createLookup(explorerManager, getActionMap()),
    //        ExplorerUtils.createLookup(((ExplorerManager.Provider)jPanel1).getExplorerManager(), getActionMap()));
    //associateLookup(merge);
    associateLookup(ExplorerUtils.createLookup(explorerManager, getActionMap()));
    
    try {
      repository = aRepository;
      session = aSession;
      explorerManager.setRootContext(new NbJcrNode(session.getRootNode()));
      //explorerManager.setExploredContext(explorerManager.getRootContext());
      Lookup.Result<Node> result = getExplorerManager().getExploredContext().getLookup().lookup(new Lookup.Template<Node>(Node.class));
      //result.addLookupListener(this);
      result.allItems();
    } catch (RepositoryException ex) {
      Exceptions.printStackTrace(ex);
    }
    
    //getExplorerManager().addPropertyChangeListener((PropertyChangeListener)jPanel1);

    
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jSplitPane1 = new javax.swing.JSplitPane();
    jScrollPane1 = new ContextTreeView();
    jPanel1 = new ExplorerTableView();

    setLayout(new java.awt.BorderLayout());

    jSplitPane1.setLeftComponent(jScrollPane1);
    jSplitPane1.setRightComponent(jPanel1);

    add(jSplitPane1, java.awt.BorderLayout.CENTER);
  }// </editor-fold>//GEN-END:initComponents
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JPanel jPanel1;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JSplitPane jSplitPane1;
  // End of variables declaration//GEN-END:variables

  @Override
  public int getPersistenceType() {
    return TopComponent.PERSISTENCE_NEVER;
  }

  @Override
  public void componentOpened() {
    // TODO add custom code on component opening
  }

  @Override
  public void componentClosed() {
    NotifyDescriptor d = 
            new NotifyDescriptor.Confirmation(
            NbBundle.getMessage(ExplorerTopComponent.class, 
            "CONFIRMATION_SessionIsNotSaved"), NotifyDescriptor.YES_NO_OPTION);
    if (DialogDisplayer.getDefault().notify(d) == NotifyDescriptor.OK_OPTION) {
      try {
        session.save();
        
      } catch (AccessDeniedException ex) {
        Exceptions.printStackTrace(ex);
      } catch (ItemExistsException ex) {
        Exceptions.printStackTrace(ex);
      } catch (ConstraintViolationException ex) {
        Exceptions.printStackTrace(ex);
      } catch (InvalidItemStateException ex) {
        Exceptions.printStackTrace(ex);
      } catch (VersionException ex) {
        Exceptions.printStackTrace(ex);
      } catch (LockException ex) {
        Exceptions.printStackTrace(ex);
      } catch (NoSuchNodeTypeException ex) {
        Exceptions.printStackTrace(ex);
      } catch (RepositoryException ex) {
        Exceptions.printStackTrace(ex);
      }
    }
    
    session.logout();
    repository = null;
    
  }

  /** replaces this in object stream */
  @Override
  public Object writeReplace() {
    return new ResolvableHelper();
  }

  @Override
  protected String preferredID() {
    return PREFERRED_ID;
  }

  static final class ResolvableHelper implements Serializable {

    private static final long serialVersionUID = 1L;

    public Object readResolve() {
      return null;
    }
  }

  public ExplorerManager getExplorerManager() {
    return explorerManager;
  }
  
  
}
/*
 * Created on 12.06.2008
 *
 */
package netbeans.outline;

import java.io.File;
import java.util.Arrays;
import java.util.Date;

import javax.swing.JComponent;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.SwingUtilities;
import javax.swing.tree.TreeModel;

import org.jdesktop.swingx.JXFrame;
import org.jdesktop.swingx.JXTable;
import org.jdesktop.swingx.JXTree;
import org.jdesktop.swingx.treetable.FileSystemModel;
import org.netbeans.swing.outline.DefaultOutlineModel;
import org.netbeans.swing.outline.Outline;
import org.netbeans.swing.outline.OutlineModel;
import org.netbeans.swing.outline.RowModel;

public class OutlineFirstCheck {

    private JComponent content;
    public OutlineFirstCheck() {

        //Initialize the ui generated by the Matisse GUI Builder, which,
        //for example, adds the JScrollPane to the JFrame ContentPane:
        Outline outline1 = new Outline();

        //Here I am assuming we are not on Windows,
        //otherwise use Utilities.isWindows() ? 1 : 0
        //from the NetBeans Utilities API:
        TreeModel treeMdl = new FileTreeModel(File.listRoots()[0]);
//        TreeModel treeMdl = new ComponentTreeTableModel(new JXFrame());
        //Create the Outline's model, consisting of the TreeModel and the RowModel,
        //together with two optional values: a boolen for something or other,
        //and the display name for the first column:
        OutlineModel mdl = DefaultOutlineModel.createOutlineModel(
                treeMdl,  new FileRowModel(), true, "File System");

        //Initialize the Outline object:
        outline1 = new Outline();

        //By default, the root is shown, while here that isn't necessary:
        outline1.setRootVisible(false);

        //Assign the model to the Outline object:
        outline1.setModel(mdl);

        
        JTabbedPane tab = new JTabbedPane();
        tab.addTab("Outline", new JScrollPane(outline1));
        JXTree tree = new JXTree(new FileSystemModel());
        tab.addTab("JXTree", new JScrollPane(tree));
        JXTable table = new JXTable(mdl);
        tab.addTab("JXTable", new JScrollPane(table));
        
        content = tab;

    } 
    
    protected JComponent getContent() {
        return content;
    }

    private static class FileTreeModel implements TreeModel {

        private File root;

        public FileTreeModel(File root) {
            this.root = root;
        }

        @Override
        public void addTreeModelListener(javax.swing.event.TreeModelListener l) {
            //do nothing
        }

        @Override
        public Object getChild(Object parent, int index) {
            File f = (File) parent;
            return f.listFiles()[index];
        }

        @Override
        public int getChildCount(Object parent) {
            File f = (File) parent;
            if (!f.isDirectory()) {
                return 0;
            } else {
                return f.list().length;
            }
        }

        @Override
        public int getIndexOfChild(Object parent, Object child) {
            File par = (File) parent;
            File ch = (File) child;
            return Arrays.asList(par.listFiles()).indexOf(ch);
        }

        @Override
        public Object getRoot() {
            return root;
        }

        @Override
        public boolean isLeaf(Object node) {
            File f = (File) node;
            return !f.isDirectory();
        }

        @Override
        public void removeTreeModelListener(javax.swing.event.TreeModelListener l) {
            //do nothing
        }

        @Override
        public void valueForPathChanged(javax.swing.tree.TreePath path, Object newValue) {
            //do nothing
        }

    }
    
    private static class ComponentRowModel implements RowModel {

        @Override
        public Class getColumnClass(int arg0) {
            return Object.class;
        }

        @Override
        public int getColumnCount() {
            return 2;
        }

        @Override
        public String getColumnName(int arg0) {
            return "same name";
        }

        @Override
        public Object getValueFor(Object node, int arg1) {
            JComponent comp = (JComponent) node;
            switch (arg1) {
            case 0:
                return comp.getName();
            case 1:
                return comp.getClass().getSimpleName();
            default:
                break;
            }
            return null;
        }

        @Override
        public boolean isCellEditable(Object arg0, int arg1) {
            return arg1 == 0;
        }

        @Override
        public void setValueFor(Object arg0, int arg1, Object arg2) {
        }
        
    }
    private static class FileRowModel implements RowModel {

        @Override
        public Class getColumnClass(int column) {
            switch (column) {
                case 0:
                    return Date.class;
                case 1:
                    return Long.class;
                default:
                    assert false;
            }
            return null;
        }

        @Override
        public int getColumnCount() {
            return 2;
        }

        @Override
        public String getColumnName(int column) {
            return column == 0 ? "Date" : "Size";
        }

        @Override
        public Object getValueFor(Object node, int column) {
            File f = (File) node;
            switch (column) {
                case 0:
                    return new Date(f.lastModified());
                case 1:
                    return new Long(f.length());
                default:
                    assert false;
            }
            return null;
        }

        @Override
        public boolean isCellEditable(Object node, int column) {
            return false;
        }

        @Override
        public void setValueFor(Object node, int column, Object value) {
            //do nothing for now
        }
        
    }
    
    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                JXFrame frame = new JXFrame("Outline", true);
                frame.add(new OutlineFirstCheck().getContent());
//                frame.applyComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
//                frame.invalidate();
//                frame.validate();
                frame.pack();
                frame.setVisible(true);
            }
        });
    }

}

/*
 * Created on 09.02.2007
 *
 */
package org.jdesktop.appframework.swingx;

import java.awt.AWTEvent;
import java.awt.KeyEventDispatcher;
import java.awt.KeyboardFocusManager;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.event.AWTEventListener;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.logging.Logger;

import javax.swing.ActionMap;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JToolBar;

import org.jdesktop.application.Action;
import org.jdesktop.application.ApplicationContext;
import org.jdesktop.swingx.JXFrame;
import org.jdesktop.swingx.JXStatusBar;
import org.jdesktop.swingx.JXTable;
import org.jdesktop.swingx.incubatorutil.AncientSwingTeam;

/**
 */
public class XTableApplication extends SingleXFrameApplication {
    private static final Logger logger = Logger
            .getLogger(XTableApplication.class.getName());
    
    @Override
    protected void startup() {
//        SearchFactory.setInstance(new AppSearchFactory());
//        SearchFactory.getInstance().setUseFindBar(true);
        JXTable table = new JXTable(new AncientSwingTeam());
        table.setColumnControlVisible(true);
        table.setName("sentimental");
        initToolBar();
        initStatusBar();        
        show(new JScrollPane(table));
    }

    private void initStatusBar() {
        final JXFrame frame = (JXFrame) getMainFrame();
        if (frame.getStatusBar() == null) {
            frame.setStatusBar(new JXStatusBar());
        }
        frame.getStatusBar().add(capsLabel);
        KeyEventDispatcher dispatcher = new KeyEventDispatcher() {
            public boolean dispatchKeyEvent(KeyEvent e) {
                if (!dispatcherEnabled) return false;
                if ((e.getKeyCode() == KeyEvent.VK_CAPS_LOCK) && (KeyEvent.KEY_RELEASED == e.getID())) {
                    logger.info("caps on " + e);
                    setCapsLocked(!capsLocked);
                } else if (e.getSource() == frame) {
                    logger.info("got from frame " + e);
                }
                return false;
            }
            
        };
        KeyboardFocusManager.getCurrentKeyboardFocusManager().
            addKeyEventDispatcher(dispatcher);
        PropertyChangeListener l = new PropertyChangeListener() {

            public void propertyChange(PropertyChangeEvent evt) {
                logger.info("activeWindow: " + evt.getNewValue());
                if (evt.getNewValue() == null) {
                    setDispatcherEnabled(false);
                } else {
                    setDispatcherEnabled(true);
                }
                
            }
            
        };
        KeyboardFocusManager.getCurrentKeyboardFocusManager()
           .addPropertyChangeListener("activeWindow", l);
        // listen for changes of activeWindow? 
        // is null if focus is somewhere outside of the app
        // otherwise, do Jan's Robot trick once (to get the 
        // state of caps at this time) and install the 
        // KeyDispatcher to be notified of changes
//        Trace14.keyboardFocusManager(true);
    }

    protected void setDispatcherEnabled(boolean dispatcherEnabled) {
        this.dispatcherEnabled = dispatcherEnabled;
        logger.info("setting dispatcher enabled: " + dispatcherEnabled);
        if (!dispatcherEnabled) {
            capsLabel.setText("caps unknown");
        } else {
            testForCapsLocked();
        }
    }

    private void setCapsLocked(boolean capsLocked) {
        boolean old = this.capsLocked;
        this.capsLocked = capsLocked;
        capsLabel.setText(capsLocked ? "caps locked" : "caps unlocked");
        logger.info("set caps" + capsLocked);
        firePropertyChange("capsLocked", !capsLocked, capsLocked);
    }
    
    private boolean capsLocked;
    private boolean dispatcherEnabled;
    private boolean isTestingCaps;
    final JLabel capsLabel = new JLabel();
    
    /**
     * does not work if coming back from window outside of java app by clicking
     * into the frame's title area: in that case the keyEvents generated by the
     * robot don't seem to reach the awt-queue? Same happens in Jan's original
     * (listening the windowFocusEvents directly)
     */
    private void testForCapsLocked() {
        boolean success = false;
        // there's an issue with this -
        // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4414164
        // TODO: check the progress from time to time
        try {
            boolean locked = java.awt.Toolkit.getDefaultToolkit()
                    .getLockingKeyState(java.awt.event.KeyEvent.VK_CAPS_LOCK);
            System.out.println("GOTCHA");
            success = true;
            setCapsLocked(locked);
        } catch (Exception ex) {
            ex.printStackTrace();
            success = false;
        }
        if (!success) {
            try {
                // Temporarily installed listener with auto-uninstall after test
                // is finished.
                Toolkit.getDefaultToolkit().addAWTEventListener(
                        new AWTEventListener() {

                            public void eventDispatched(AWTEvent event) {
                                if (!(event instanceof KeyEvent)) {
                                    return;
                                }
                                KeyEvent e = (KeyEvent) event;
                                if (e.getID() != KeyEvent.KEY_RELEASED) {
                                    return;
                                }
                                logger.info("test caps: " + event);
                                if (isTestingCaps && e.getKeyCode() > 64
                                        && e.getKeyCode() < 91) {
                                    setCapsLocked(!e.isShiftDown()
                                            && Character.isUpperCase(e
                                                    .getKeyChar()));
                                }
                                if (isTestingCaps
                                        && e.getKeyCode() == KeyEvent.VK_BACK_SPACE) {
                                    // uninstall
                                    isTestingCaps = false;
                                    Toolkit.getDefaultToolkit()
                                            .removeAWTEventListener(this);
                                }

                            }
                        }, AWTEvent.KEY_EVENT_MASK);
                Robot r = new Robot();
                isTestingCaps = true;
                logger.info("before keypress");
                // occasionally, the robot dispatched keys dont reach
                // the awteventListener: when "coming back" from a outside
                // window and activate the jave by clicking into the title
                r.keyPress(65);
                logger.info("after keypress");
                r.keyRelease(65);
                logger.info("after keyreleased");
                r.keyPress(KeyEvent.VK_BACK_SPACE);
                r.keyRelease(KeyEvent.VK_BACK_SPACE);
            } catch (Exception e1) {
                // this can happen for example due to security reasons in unsigned applets
                // when we can't test caps lock state programatically bail out silently
            }
        }

    };

    private void initToolBar() {
        ApplicationContext context = getContext();
        ActionMap actionMap = context.getActionMap(getClass(), this);
        Object[] keys = actionMap.keys();
        for (int i = 0; i < keys.length; i++) {
            if (((JXFrame) getMainFrame()).getToolBar() == null) {
                ((JXFrame) getMainFrame()).setToolBar(new JToolBar());
            }
            ((JXFrame) getMainFrame()).getToolBar().add(actionMap.get(keys[i]));
        }
    }

    @Action
    public void openFileDialog() {
        JFileChooser chooser = new JAppFileChooser();
        chooser.showDialog(getMainFrame(), null);
    }
    
    public static void main(String[] args) {
        launch(XTableApplication.class, args);
    }

}
